import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';

const baseDir = '/mnt/Aviaserver/!–û–±—â–∞—è/!–ê–≤–∏–∞—Ç–æ—Ä. –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏'; // –ì–ª–∞–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
const jsonFile = './data.json';

async function getFileHash(filePath) {
  try {
    const content = await fs.readFile(filePath);
    return crypto.createHash('md5').update(content).digest('hex');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

function getFileType(filename) {
  const ext = path.extname(filename).toLowerCase();
  const types = {
    '3D –º–æ–¥–µ–ª—å': ['.fbx', '.obj', '.stl', '.gltf'],
    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': ['.jpg', '.jpeg', '.png', '.gif'],
    '–î–æ–∫—É–º–µ–Ω—Ç': ['.doc', '.docx', '.pdf', '.txt'],
    '–ê—Ä—Ö–∏–≤': ['.zip', '.rar']
  };
  return Object.entries(types).find(([, exts]) => exts.includes(ext))?.[0] || '–î—Ä—É–≥–æ–µ';
}

async function scanSubfolders(folder) {
  try {
    const items = await fs.readdir(folder, { withFileTypes: true });
    const promises = items.map(async item => {
      const itemPath = path.join(folder, item.name);
      if (item.isFile()) {
        const hash = await getFileHash(itemPath);
        return hash ? {
          filename: item.name,
          filepath: path.relative(baseDir, itemPath),
          filehash: hash,
          type: getFileType(item.name)
        } : null;
      } else if (item.isDirectory()) {
        console.log(`üîç –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ: ${itemPath}`);
        return scanSubfolders(itemPath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
      }
    });
    const results = await Promise.all(promises);
    return results.flat().filter(Boolean); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º null
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ ${folder}: ${error.message}`);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

async function scanFiles() {
  try {
    const categories = await fs.readdir(baseDir, { withFileTypes: true });
    const fileData = [];

    console.log('üöÄ –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...');

    const categoryPromises = categories.map(async category => {
      if (!category.isDirectory()) return;

      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.name}`);
      const categoryPath = path.join(baseDir, category.name);
      const subcategories = await fs.readdir(categoryPath, { withFileTypes: true });

      const subcategoryPromises = subcategories.map(async subcategory => {
        if (!subcategory.isDirectory()) return;

        const subcategoryPath = path.join(categoryPath, subcategory.name);
        if (/^\d/.test(subcategory.name)) { // –ï—Å–ª–∏ –∏–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–æ–≤–∞—Ä
          console.log(`    ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: ${subcategory.name}`);
          const productFiles = await scanSubfolders(subcategoryPath);
          return {
            category: category.name,
            subcategory: subcategory.name,
            product: subcategory.name,
            files: productFiles
          };
        } else {
          console.log(`    üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${subcategory.name}`);
          const products = await fs.readdir(subcategoryPath, { withFileTypes: true });
          const productPromises = products.map(async product => {
            if (!product.isDirectory()) return;
            const productPath = path.join(subcategoryPath, product.name);
            const productFiles = await scanSubfolders(productPath);
            return {
              category: category.name,
              subcategory: subcategory.name,
              product: product.name,
              files: productFiles
            };
          });
          return (await Promise.all(productPromises)).filter(Boolean); // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        }
      });
      const subcategoryData = await Promise.all(subcategoryPromises);
      fileData.push(...subcategoryData.filter(Boolean)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    });

    await Promise.all(categoryPromises);
    await fs.writeFile(jsonFile, JSON.stringify(fileData, null, 2), 'utf8');
    console.log(`‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${jsonFile}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
  }
}

scanFiles();